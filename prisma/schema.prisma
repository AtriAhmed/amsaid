// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  ADMIN
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String?
  image            String?
  passwordHash     String
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  role             Role      @default(ADMIN) // default role is ADMIN
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Person {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String? // optional
  books     Book[]
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookCategory {
  id        Int      @id @default(autoincrement())
  name      String
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoCategory {
  id        Int      @id @default(autoincrement())
  name      String
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  books     Book[]
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  authorId    Int
  author      Person       @relation(fields: [authorId], references: [id])
  categoryId  Int
  category    BookCategory @relation(fields: [categoryId], references: [id])
  active      Boolean      @default(true)
  downloads   Int          @default(0)
  language    String
  coverPhoto  String?
  fileUrl     String
  pages       Int
  size        Int // store file size in KB/MB
  tags        Tag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Video {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  categoryId  Int
  category    VideoCategory @relation(fields: [categoryId], references: [id])
  duration    Int // in seconds
  url         String
  poster      String?
  active      Boolean       @default(true)
  views       Int           @default(0)
  speakers    Person[]
  date        DateTime // actual event date
  placeId     Int?
  place       Place?        @relation(fields: [placeId], references: [id])
  language    String
  tags        Tag[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model visitLog {
  id          Int      @id @default(autoincrement())
  ipAddress   String
  fingerprint String
  visitedAt   DateTime @default(now())
}

model stats {
  id            Int @id @default(autoincrement())
  visits        Int @default(0)
  totalBooks    Int @default(0)
  bookDownloads Int @default(0)
  totalVideos   Int @default(0)
  videoViews    Int @default(0)
}
